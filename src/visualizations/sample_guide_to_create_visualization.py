# -*- coding: utf-8 -*-
"""Sample-guide-to-create-visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10T0P5y0csDGa9zHxp-VN_n6CrMt3E4Yq
"""

!pip install pandas geopandas folium plotly

import pandas as pd
import geopandas as gpd
import folium
import plotly.express as px

import pandas as pd
import numpy as np

# Generate random data for 25 zones
zone_ids = list(range(1, 26))
energy_demand_values = np.random.randint(5000, 20000, size=25)
energy_supply_values = np.random.randint(4000, 15000, size=25)
solar_potential_values = np.random.randint(2000, 10000, size=25)

# Create DataFrames
energy_demand_df = pd.DataFrame({"zone": zone_ids, "energy_demand": energy_demand_values})
energy_supply_df = pd.DataFrame({"zone": zone_ids, "energy_supply": energy_supply_values})
solar_potential_df = pd.DataFrame({"zone": zone_ids, "solar_potential": solar_potential_values})

# Save DataFrames to CSV
energy_demand_df.to_csv("energy_demand.csv", index=False)
energy_supply_df.to_csv("energy_supply.csv", index=False)
solar_potential_df.to_csv("solar_potential.csv", index=False)

energy_demand = pd.read_csv("energy_demand.csv")
energy_supply = pd.read_csv("energy_supply.csv")
solar_potential = pd.read_csv("solar_potential.csv")

energy_data = pd.merge(energy_demand, energy_supply, on="zone")
energy_data = pd.merge(energy_data, solar_potential, on="zone")

!pip install geopandas shapely

import geopandas as gpd
from shapely.geometry import Polygon

# Create a list of synthetic polygons
polygons = [
    Polygon([(x, y), (x + 0.1, y), (x + 0.1, y + 0.1), (x, y + 0.1)])
    for x in range(0, 5)
    for y in range(0, 5)
]

# Create a list of zone IDs
zone_ids = list(range(1, 26))

# Create a GeoDataFrame
portugal_zones = gpd.GeoDataFrame({"zone_id": zone_ids, "geometry": polygons})

# Save GeoDataFrame as a shapefile
portugal_zones.to_file("portugal_zones.shp")

portugal_zones = gpd.read_file("portugal_zones.shp")

energy_data_geo = portugal_zones.merge(energy_data, left_on="zone_id", right_on="zone")

# Create a GeoDataFrame
portugal_zones = gpd.GeoDataFrame({"zone_id": zone_ids, "geometry": polygons})
portugal_zones.set_crs(epsg=4326, inplace=True)

# Merge energy_data with portugal_zones to create a GeoDataFrame
energy_data_geo = portugal_zones.merge(energy_data, left_on="zone_id", right_on="zone")
energy_data_geo.set_crs(epsg=4326, inplace=True)

m = folium.Map(location=[39.3999, -8.2245], zoom_start=6)

# Create a Choropleth map for energy demand
folium.Choropleth(
    geo_data=energy_data_geo,
    name="Energy Demand",
    data=energy_data,
    columns=["zone", "energy_demand"],
    key_on="feature.properties.zone_id",
    fill_color="YlOrRd",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Energy Demand",
).add_to(m)

# Create a Choropleth map for energy supply
folium.Choropleth(
    geo_data=energy_data_geo,
    name="Energy Supply",
    data=energy_data,
    columns=["zone", "energy_supply"],
    key_on="feature.properties.zone_id",
    fill_color="BuGn",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Energy Supply",
).add_to(m)

# Create a Choropleth map for solar energy potential
folium.Choropleth(
    geo_data=energy_data_geo,
    name="Solar Energy Potential",
    data=energy_data,
    columns=["zone", "solar_potential"],
    key_on="feature.properties.zone_id",
    fill_color="YlGn",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Solar Energy Potential",
).add_to(m)

folium.LayerControl().add_to(m)

m.save("energy_map.html")

# Energy supply bar chart
energy_supply_chart = px.bar(energy_data, x="zone", y="energy_supply", title="Energy Supply per Zone")
energy_supply_chart.write_html("energy_supply_chart.html")

# Solar energy potential bar chart
solar_potential_chart = px.bar(energy_data, x="zone", y="solar_potential", title="Solar Energy Potential per Zone")
solar_potential_chart.write_html("solar_potential_chart.html")

import os
import sys
import webbrowser

html_file_path = "/content/energy_map.html"

if sys.platform.startswith("win"):
    os.system(f'start {html_file_path}')
elif sys.platform.startswith("darwin"):
    os.system(f'open {html_file_path}')
elif sys.platform.startswith("linux"):
    os.system(f'xdg-open {html_file_path}')
else:
    webbrowser.open_new_tab(html_file_path)

"""Method to reduce the error"""

import pandas as pd
import json

# Sample dataset
data = {
    'zone': [1, 2, 3, 4, 5],
    'energy_demand': [100, 200, 150, 250, 300],
    'energy_supply': [110, 190, 160, 240, 310],
    'solar_potential': [120, 180, 170, 230, 320]
}
energy_data = pd.DataFrame(data)

# Sample GeoJSON data
geo_data = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {"zone_id": 1},
            "geometry": {
                "type": "Polygon",
                "coordinates": [[[-8, 39], [-8, 40], [-7, 40], [-7, 39], [-8, 39]]]
            },
        },
        {
            "type": "Feature",
            "properties": {"zone_id": 2},
            "geometry": {
                "type": "Polygon",
                "coordinates": [[[-7, 39], [-7, 40], [-6, 40], [-6, 39], [-7, 39]]]
            },
        },
        {
            "type": "Feature",
            "properties": {"zone_id": 3},
            "geometry": {
                "type": "Polygon",
                "coordinates": [[[-8, 40], [-8, 41], [-7, 41], [-7, 40], [-8, 40]]]
            },
        },
        {
            "type": "Feature",
            "properties": {"zone_id": 4},
            "geometry": {
                "type": "Polygon",
                "coordinates": [[[-7, 40], [-7, 41], [-6, 41], [-6, 40], [-7, 40]]]
            },
        },
        {
            "type": "Feature",
            "properties": {"zone_id": 5},
            "geometry": {
                "type": "Polygon",
                "coordinates": [[[-6, 39], [-6, 40], [-5, 40], [-5, 39], [-6, 39]]]
            },
        },
    ]
}
energy_data_geo = json.dumps(geo_data)

import folium

m = folium.Map(location=[39.3999, -8.2245], zoom_start=6)

# Create a Choropleth map for energy demand
folium.Choropleth(
    geo_data=energy_data_geo,
    name="Energy Demand",
    data=energy_data,
    columns=["zone", "energy_demand"],
    key_on="feature.properties.zone_id",
    fill_color="YlOrRd",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Energy Demand",
).add_to(m)

# Create a Choropleth map for energy supply
folium.Choropleth(
    geo_data=energy_data_geo,
    name="Energy Supply",
    data=energy_data,
    columns=["zone", "energy_supply"],
    key_on="feature.properties.zone_id",
    fill_color="BuGn",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Energy Supply",
).add_to(m)

# Create a Choropleth map for solar energy potential
folium.Choropleth(
    geo_data=energy_data_geo,
    name="Solar Energy Potential",
    data=energy_data,
    columns=["zone", "solar_potential"],
    key_on="feature.properties.zone_id",
    fill_color="YlGn",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Solar Energy Potential",
).add_to(m)

folium.LayerControl().add_to(m)

m.save("energy_map_new.html")